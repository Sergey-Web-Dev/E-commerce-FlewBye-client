/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FlewBye
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export type CartControllerGetCartItemParams = {
  q?: string;
  qu?: number;
};

export type ItemsControllerGetItemsParams = {
  q?: string;
  qu?: number;
};

export interface PatchCartItemDto {
  isFinished?: boolean;
}

export interface AddCartItemDto {
  count: number;
  createdAt: string;
  mail: string;
  tel: string;
}

export type PatchItemDtoType =
  (typeof PatchItemDtoType)[keyof typeof PatchItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchItemDtoType = {
  Gel: "Gel",
  Gift: "Gift",
  Soap: "Soap",
} as const;

export interface PatchItemDto {
  createdAt: string;
  description: string;
  img: string[];
  name: string;
  price: number;
  type: PatchItemDtoType;
}

export type AddItemDtoType =
  (typeof AddItemDtoType)[keyof typeof AddItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddItemDtoType = {
  Gel: "Gel",
  Gift: "Gift",
  Soap: "Soap",
} as const;

export interface AddItemDto {
  createdAt: string;
  description: string;
  img: Blob[];
  name: string;
  price: number;
  type: AddItemDtoType;
}

export type GetItemDtoType =
  (typeof GetItemDtoType)[keyof typeof GetItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetItemDtoType = {
  Gel: "Gel",
  Gift: "Gift",
  Soap: "Soap",
} as const;

export interface CartItemDto {
  count: number;
  createdAt: string;
  id: number;
  isFinished: boolean;
  item: GetItemDto[];
  mail: string;
  ownerId: number;
  tel: string;
}

export interface GetItemDto {
  cart: CartItemDto[];
  createdAt: string;
  description: string;
  id: number;
  img: string[];
  name: string;
  price: number;
  type: GetItemDtoType;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

export interface GetHelloDto {
  message: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const appControllerGetHello = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetHelloDto>({ url: `/`, method: "GET" }, options);
};

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpBodyDto,
    },
    options,
  );
};

export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInBodyDto,
    },
    options,
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "POST" },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session-info`, method: "GET" },
    options,
  );
};

export const itemsControllerGetItems = (
  params?: ItemsControllerGetItemsParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetItemDto>(
    { url: `/items/get-items`, method: "GET", params },
    options,
  );
};

export const itemsControllerAddItem = (
  addItemDto: BodyType<AddItemDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  const formData = new FormData();
  formData.append("name", addItemDto.name);
  addItemDto.img.forEach((value) => formData.append("img", value));
  formData.append("description", addItemDto.description);
  formData.append("price", addItemDto.price.toString());
  formData.append("type", addItemDto.type);
  formData.append("createdAt", addItemDto.createdAt);

  return createInstance<AddItemDto>(
    {
      url: `/items/create-item`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const itemsControllerPatchItem = (
  id: number,
  patchItemDto: BodyType<PatchItemDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PatchItemDto>(
    {
      url: `/items/update-item/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: patchItemDto,
    },
    options,
  );
};

export const itemsControllerRemoveItem = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetItemDto>(
    { url: `/items/delete-item/${id}`, method: "DELETE" },
    options,
  );
};

export const cartControllerGetAllCartItems = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CartItemDto>(
    { url: `/cart/get-all-items`, method: "GET" },
    options,
  );
};

export const cartControllerGetCartItem = (
  params?: CartControllerGetCartItemParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CartItemDto>(
    { url: `/cart/get-item`, method: "GET", params },
    options,
  );
};

export const cartControllerAddCartItem = (
  id: number,
  addCartItemDto: BodyType<AddCartItemDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CartItemDto>(
    {
      url: `/cart/create-item/${id}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addCartItemDto,
    },
    options,
  );
};

export const cartControllerPatchCartItem = (
  id: number,
  patchCartItemDto: BodyType<PatchCartItemDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CartItemDto>(
    {
      url: `/cart/update-finish-block/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: patchCartItemDto,
    },
    options,
  );
};

export const cartControllerRemoveCartItem = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CartItemDto>(
    { url: `/cart/remove-item/${id}`, method: "DELETE" },
    options,
  );
};

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type ItemsControllerGetItemsResult = NonNullable<
  Awaited<ReturnType<typeof itemsControllerGetItems>>
>;
export type ItemsControllerAddItemResult = NonNullable<
  Awaited<ReturnType<typeof itemsControllerAddItem>>
>;
export type ItemsControllerPatchItemResult = NonNullable<
  Awaited<ReturnType<typeof itemsControllerPatchItem>>
>;
export type ItemsControllerRemoveItemResult = NonNullable<
  Awaited<ReturnType<typeof itemsControllerRemoveItem>>
>;
export type CartControllerGetAllCartItemsResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerGetAllCartItems>>
>;
export type CartControllerGetCartItemResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerGetCartItem>>
>;
export type CartControllerAddCartItemResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerAddCartItem>>
>;
export type CartControllerPatchCartItemResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerPatchCartItem>>
>;
export type CartControllerRemoveCartItemResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerRemoveCartItem>>
>;
